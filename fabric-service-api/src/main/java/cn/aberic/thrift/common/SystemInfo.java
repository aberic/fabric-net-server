/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package cn.aberic.thrift.common;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2018-06-22")
public class SystemInfo implements org.apache.thrift.TBase<SystemInfo, SystemInfo._Fields>, java.io.Serializable, Cloneable, Comparable<SystemInfo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SystemInfo");

  private static final org.apache.thrift.protocol.TField CPU_FIELD_DESC = new org.apache.thrift.protocol.TField("cpu", org.apache.thrift.protocol.TType.DOUBLE, (short)1);
  private static final org.apache.thrift.protocol.TField MEMORY_FIELD_DESC = new org.apache.thrift.protocol.TField("memory", org.apache.thrift.protocol.TType.DOUBLE, (short)2);
  private static final org.apache.thrift.protocol.TField SWAP_FIELD_DESC = new org.apache.thrift.protocol.TField("swap", org.apache.thrift.protocol.TType.DOUBLE, (short)3);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new SystemInfoStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new SystemInfoTupleSchemeFactory();

  public double cpu; // required
  public double memory; // required
  public double swap; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    CPU((short)1, "cpu"),
    MEMORY((short)2, "memory"),
    SWAP((short)3, "swap");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CPU
          return CPU;
        case 2: // MEMORY
          return MEMORY;
        case 3: // SWAP
          return SWAP;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __CPU_ISSET_ID = 0;
  private static final int __MEMORY_ISSET_ID = 1;
  private static final int __SWAP_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CPU, new org.apache.thrift.meta_data.FieldMetaData("cpu", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.MEMORY, new org.apache.thrift.meta_data.FieldMetaData("memory", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.SWAP, new org.apache.thrift.meta_data.FieldMetaData("swap", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SystemInfo.class, metaDataMap);
  }

  public SystemInfo() {
  }

  public SystemInfo(
    double cpu,
    double memory,
    double swap)
  {
    this();
    this.cpu = cpu;
    setCpuIsSet(true);
    this.memory = memory;
    setMemoryIsSet(true);
    this.swap = swap;
    setSwapIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SystemInfo(SystemInfo other) {
    __isset_bitfield = other.__isset_bitfield;
    this.cpu = other.cpu;
    this.memory = other.memory;
    this.swap = other.swap;
  }

  public SystemInfo deepCopy() {
    return new SystemInfo(this);
  }

  @Override
  public void clear() {
    setCpuIsSet(false);
    this.cpu = 0.0;
    setMemoryIsSet(false);
    this.memory = 0.0;
    setSwapIsSet(false);
    this.swap = 0.0;
  }

  public double getCpu() {
    return this.cpu;
  }

  public SystemInfo setCpu(double cpu) {
    this.cpu = cpu;
    setCpuIsSet(true);
    return this;
  }

  public void unsetCpu() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CPU_ISSET_ID);
  }

  /** Returns true if field cpu is set (has been assigned a value) and false otherwise */
  public boolean isSetCpu() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CPU_ISSET_ID);
  }

  public void setCpuIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CPU_ISSET_ID, value);
  }

  public double getMemory() {
    return this.memory;
  }

  public SystemInfo setMemory(double memory) {
    this.memory = memory;
    setMemoryIsSet(true);
    return this;
  }

  public void unsetMemory() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __MEMORY_ISSET_ID);
  }

  /** Returns true if field memory is set (has been assigned a value) and false otherwise */
  public boolean isSetMemory() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __MEMORY_ISSET_ID);
  }

  public void setMemoryIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __MEMORY_ISSET_ID, value);
  }

  public double getSwap() {
    return this.swap;
  }

  public SystemInfo setSwap(double swap) {
    this.swap = swap;
    setSwapIsSet(true);
    return this;
  }

  public void unsetSwap() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SWAP_ISSET_ID);
  }

  /** Returns true if field swap is set (has been assigned a value) and false otherwise */
  public boolean isSetSwap() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SWAP_ISSET_ID);
  }

  public void setSwapIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SWAP_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case CPU:
      if (value == null) {
        unsetCpu();
      } else {
        setCpu((java.lang.Double)value);
      }
      break;

    case MEMORY:
      if (value == null) {
        unsetMemory();
      } else {
        setMemory((java.lang.Double)value);
      }
      break;

    case SWAP:
      if (value == null) {
        unsetSwap();
      } else {
        setSwap((java.lang.Double)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case CPU:
      return getCpu();

    case MEMORY:
      return getMemory();

    case SWAP:
      return getSwap();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case CPU:
      return isSetCpu();
    case MEMORY:
      return isSetMemory();
    case SWAP:
      return isSetSwap();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof SystemInfo)
      return this.equals((SystemInfo)that);
    return false;
  }

  public boolean equals(SystemInfo that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_cpu = true;
    boolean that_present_cpu = true;
    if (this_present_cpu || that_present_cpu) {
      if (!(this_present_cpu && that_present_cpu))
        return false;
      if (this.cpu != that.cpu)
        return false;
    }

    boolean this_present_memory = true;
    boolean that_present_memory = true;
    if (this_present_memory || that_present_memory) {
      if (!(this_present_memory && that_present_memory))
        return false;
      if (this.memory != that.memory)
        return false;
    }

    boolean this_present_swap = true;
    boolean that_present_swap = true;
    if (this_present_swap || that_present_swap) {
      if (!(this_present_swap && that_present_swap))
        return false;
      if (this.swap != that.swap)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(cpu);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(memory);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(swap);

    return hashCode;
  }

  @Override
  public int compareTo(SystemInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetCpu()).compareTo(other.isSetCpu());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCpu()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cpu, other.cpu);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetMemory()).compareTo(other.isSetMemory());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMemory()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.memory, other.memory);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSwap()).compareTo(other.isSetSwap());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSwap()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.swap, other.swap);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("SystemInfo(");
    boolean first = true;

    sb.append("cpu:");
    sb.append(this.cpu);
    first = false;
    if (!first) sb.append(", ");
    sb.append("memory:");
    sb.append(this.memory);
    first = false;
    if (!first) sb.append(", ");
    sb.append("swap:");
    sb.append(this.swap);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SystemInfoStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public SystemInfoStandardScheme getScheme() {
      return new SystemInfoStandardScheme();
    }
  }

  private static class SystemInfoStandardScheme extends org.apache.thrift.scheme.StandardScheme<SystemInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SystemInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // CPU
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.cpu = iprot.readDouble();
              struct.setCpuIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // MEMORY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.memory = iprot.readDouble();
              struct.setMemoryIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SWAP
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.swap = iprot.readDouble();
              struct.setSwapIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SystemInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(CPU_FIELD_DESC);
      oprot.writeDouble(struct.cpu);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MEMORY_FIELD_DESC);
      oprot.writeDouble(struct.memory);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SWAP_FIELD_DESC);
      oprot.writeDouble(struct.swap);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SystemInfoTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public SystemInfoTupleScheme getScheme() {
      return new SystemInfoTupleScheme();
    }
  }

  private static class SystemInfoTupleScheme extends org.apache.thrift.scheme.TupleScheme<SystemInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SystemInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetCpu()) {
        optionals.set(0);
      }
      if (struct.isSetMemory()) {
        optionals.set(1);
      }
      if (struct.isSetSwap()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetCpu()) {
        oprot.writeDouble(struct.cpu);
      }
      if (struct.isSetMemory()) {
        oprot.writeDouble(struct.memory);
      }
      if (struct.isSetSwap()) {
        oprot.writeDouble(struct.swap);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SystemInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.cpu = iprot.readDouble();
        struct.setCpuIsSet(true);
      }
      if (incoming.get(1)) {
        struct.memory = iprot.readDouble();
        struct.setMemoryIsSet(true);
      }
      if (incoming.get(2)) {
        struct.swap = iprot.readDouble();
        struct.setSwapIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

