/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package cn.aberic.thrift.peer;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2018-06-20")
public class PeerInfo implements org.apache.thrift.TBase<PeerInfo, PeerInfo._Fields>, java.io.Serializable, Cloneable, Comparable<PeerInfo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("PeerInfo");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField EVENT_HUB_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("eventHubName", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField LOCATION_FIELD_DESC = new org.apache.thrift.protocol.TField("location", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField EVENT_HUB_LOCATION_FIELD_DESC = new org.apache.thrift.protocol.TField("eventHubLocation", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField IS_EVENT_LISTENER_FIELD_DESC = new org.apache.thrift.protocol.TField("isEventListener", org.apache.thrift.protocol.TType.BOOL, (short)6);
  private static final org.apache.thrift.protocol.TField ORG_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("orgId", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField ORG_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("orgName", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("date", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField CHANNEL_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("channelCount", org.apache.thrift.protocol.TType.I32, (short)10);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new PeerInfoStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new PeerInfoTupleSchemeFactory();

  public int id; // required
  public java.lang.String name; // required
  public java.lang.String eventHubName; // required
  public java.lang.String location; // required
  public java.lang.String eventHubLocation; // required
  public boolean isEventListener; // required
  public int orgId; // required
  public java.lang.String orgName; // required
  public java.lang.String date; // required
  public int channelCount; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    NAME((short)2, "name"),
    EVENT_HUB_NAME((short)3, "eventHubName"),
    LOCATION((short)4, "location"),
    EVENT_HUB_LOCATION((short)5, "eventHubLocation"),
    IS_EVENT_LISTENER((short)6, "isEventListener"),
    ORG_ID((short)7, "orgId"),
    ORG_NAME((short)8, "orgName"),
    DATE((short)9, "date"),
    CHANNEL_COUNT((short)10, "channelCount");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // NAME
          return NAME;
        case 3: // EVENT_HUB_NAME
          return EVENT_HUB_NAME;
        case 4: // LOCATION
          return LOCATION;
        case 5: // EVENT_HUB_LOCATION
          return EVENT_HUB_LOCATION;
        case 6: // IS_EVENT_LISTENER
          return IS_EVENT_LISTENER;
        case 7: // ORG_ID
          return ORG_ID;
        case 8: // ORG_NAME
          return ORG_NAME;
        case 9: // DATE
          return DATE;
        case 10: // CHANNEL_COUNT
          return CHANNEL_COUNT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __ISEVENTLISTENER_ISSET_ID = 1;
  private static final int __ORGID_ISSET_ID = 2;
  private static final int __CHANNELCOUNT_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EVENT_HUB_NAME, new org.apache.thrift.meta_data.FieldMetaData("eventHubName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LOCATION, new org.apache.thrift.meta_data.FieldMetaData("location", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EVENT_HUB_LOCATION, new org.apache.thrift.meta_data.FieldMetaData("eventHubLocation", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IS_EVENT_LISTENER, new org.apache.thrift.meta_data.FieldMetaData("isEventListener", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.ORG_ID, new org.apache.thrift.meta_data.FieldMetaData("orgId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ORG_NAME, new org.apache.thrift.meta_data.FieldMetaData("orgName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DATE, new org.apache.thrift.meta_data.FieldMetaData("date", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CHANNEL_COUNT, new org.apache.thrift.meta_data.FieldMetaData("channelCount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(PeerInfo.class, metaDataMap);
  }

  public PeerInfo() {
  }

  public PeerInfo(
    int id,
    java.lang.String name,
    java.lang.String eventHubName,
    java.lang.String location,
    java.lang.String eventHubLocation,
    boolean isEventListener,
    int orgId,
    java.lang.String orgName,
    java.lang.String date,
    int channelCount)
  {
    this();
    this.id = id;
    setIdIsSet(true);
    this.name = name;
    this.eventHubName = eventHubName;
    this.location = location;
    this.eventHubLocation = eventHubLocation;
    this.isEventListener = isEventListener;
    setIsEventListenerIsSet(true);
    this.orgId = orgId;
    setOrgIdIsSet(true);
    this.orgName = orgName;
    this.date = date;
    this.channelCount = channelCount;
    setChannelCountIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public PeerInfo(PeerInfo other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    if (other.isSetName()) {
      this.name = other.name;
    }
    if (other.isSetEventHubName()) {
      this.eventHubName = other.eventHubName;
    }
    if (other.isSetLocation()) {
      this.location = other.location;
    }
    if (other.isSetEventHubLocation()) {
      this.eventHubLocation = other.eventHubLocation;
    }
    this.isEventListener = other.isEventListener;
    this.orgId = other.orgId;
    if (other.isSetOrgName()) {
      this.orgName = other.orgName;
    }
    if (other.isSetDate()) {
      this.date = other.date;
    }
    this.channelCount = other.channelCount;
  }

  public PeerInfo deepCopy() {
    return new PeerInfo(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    this.name = null;
    this.eventHubName = null;
    this.location = null;
    this.eventHubLocation = null;
    setIsEventListenerIsSet(false);
    this.isEventListener = false;
    setOrgIdIsSet(false);
    this.orgId = 0;
    this.orgName = null;
    this.date = null;
    setChannelCountIsSet(false);
    this.channelCount = 0;
  }

  public int getId() {
    return this.id;
  }

  public PeerInfo setId(int id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public java.lang.String getName() {
    return this.name;
  }

  public PeerInfo setName(java.lang.String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public java.lang.String getEventHubName() {
    return this.eventHubName;
  }

  public PeerInfo setEventHubName(java.lang.String eventHubName) {
    this.eventHubName = eventHubName;
    return this;
  }

  public void unsetEventHubName() {
    this.eventHubName = null;
  }

  /** Returns true if field eventHubName is set (has been assigned a value) and false otherwise */
  public boolean isSetEventHubName() {
    return this.eventHubName != null;
  }

  public void setEventHubNameIsSet(boolean value) {
    if (!value) {
      this.eventHubName = null;
    }
  }

  public java.lang.String getLocation() {
    return this.location;
  }

  public PeerInfo setLocation(java.lang.String location) {
    this.location = location;
    return this;
  }

  public void unsetLocation() {
    this.location = null;
  }

  /** Returns true if field location is set (has been assigned a value) and false otherwise */
  public boolean isSetLocation() {
    return this.location != null;
  }

  public void setLocationIsSet(boolean value) {
    if (!value) {
      this.location = null;
    }
  }

  public java.lang.String getEventHubLocation() {
    return this.eventHubLocation;
  }

  public PeerInfo setEventHubLocation(java.lang.String eventHubLocation) {
    this.eventHubLocation = eventHubLocation;
    return this;
  }

  public void unsetEventHubLocation() {
    this.eventHubLocation = null;
  }

  /** Returns true if field eventHubLocation is set (has been assigned a value) and false otherwise */
  public boolean isSetEventHubLocation() {
    return this.eventHubLocation != null;
  }

  public void setEventHubLocationIsSet(boolean value) {
    if (!value) {
      this.eventHubLocation = null;
    }
  }

  public boolean isIsEventListener() {
    return this.isEventListener;
  }

  public PeerInfo setIsEventListener(boolean isEventListener) {
    this.isEventListener = isEventListener;
    setIsEventListenerIsSet(true);
    return this;
  }

  public void unsetIsEventListener() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ISEVENTLISTENER_ISSET_ID);
  }

  /** Returns true if field isEventListener is set (has been assigned a value) and false otherwise */
  public boolean isSetIsEventListener() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ISEVENTLISTENER_ISSET_ID);
  }

  public void setIsEventListenerIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ISEVENTLISTENER_ISSET_ID, value);
  }

  public int getOrgId() {
    return this.orgId;
  }

  public PeerInfo setOrgId(int orgId) {
    this.orgId = orgId;
    setOrgIdIsSet(true);
    return this;
  }

  public void unsetOrgId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ORGID_ISSET_ID);
  }

  /** Returns true if field orgId is set (has been assigned a value) and false otherwise */
  public boolean isSetOrgId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ORGID_ISSET_ID);
  }

  public void setOrgIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ORGID_ISSET_ID, value);
  }

  public java.lang.String getOrgName() {
    return this.orgName;
  }

  public PeerInfo setOrgName(java.lang.String orgName) {
    this.orgName = orgName;
    return this;
  }

  public void unsetOrgName() {
    this.orgName = null;
  }

  /** Returns true if field orgName is set (has been assigned a value) and false otherwise */
  public boolean isSetOrgName() {
    return this.orgName != null;
  }

  public void setOrgNameIsSet(boolean value) {
    if (!value) {
      this.orgName = null;
    }
  }

  public java.lang.String getDate() {
    return this.date;
  }

  public PeerInfo setDate(java.lang.String date) {
    this.date = date;
    return this;
  }

  public void unsetDate() {
    this.date = null;
  }

  /** Returns true if field date is set (has been assigned a value) and false otherwise */
  public boolean isSetDate() {
    return this.date != null;
  }

  public void setDateIsSet(boolean value) {
    if (!value) {
      this.date = null;
    }
  }

  public int getChannelCount() {
    return this.channelCount;
  }

  public PeerInfo setChannelCount(int channelCount) {
    this.channelCount = channelCount;
    setChannelCountIsSet(true);
    return this;
  }

  public void unsetChannelCount() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CHANNELCOUNT_ISSET_ID);
  }

  /** Returns true if field channelCount is set (has been assigned a value) and false otherwise */
  public boolean isSetChannelCount() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CHANNELCOUNT_ISSET_ID);
  }

  public void setChannelCountIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CHANNELCOUNT_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((java.lang.Integer)value);
      }
      break;

    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((java.lang.String)value);
      }
      break;

    case EVENT_HUB_NAME:
      if (value == null) {
        unsetEventHubName();
      } else {
        setEventHubName((java.lang.String)value);
      }
      break;

    case LOCATION:
      if (value == null) {
        unsetLocation();
      } else {
        setLocation((java.lang.String)value);
      }
      break;

    case EVENT_HUB_LOCATION:
      if (value == null) {
        unsetEventHubLocation();
      } else {
        setEventHubLocation((java.lang.String)value);
      }
      break;

    case IS_EVENT_LISTENER:
      if (value == null) {
        unsetIsEventListener();
      } else {
        setIsEventListener((java.lang.Boolean)value);
      }
      break;

    case ORG_ID:
      if (value == null) {
        unsetOrgId();
      } else {
        setOrgId((java.lang.Integer)value);
      }
      break;

    case ORG_NAME:
      if (value == null) {
        unsetOrgName();
      } else {
        setOrgName((java.lang.String)value);
      }
      break;

    case DATE:
      if (value == null) {
        unsetDate();
      } else {
        setDate((java.lang.String)value);
      }
      break;

    case CHANNEL_COUNT:
      if (value == null) {
        unsetChannelCount();
      } else {
        setChannelCount((java.lang.Integer)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case NAME:
      return getName();

    case EVENT_HUB_NAME:
      return getEventHubName();

    case LOCATION:
      return getLocation();

    case EVENT_HUB_LOCATION:
      return getEventHubLocation();

    case IS_EVENT_LISTENER:
      return isIsEventListener();

    case ORG_ID:
      return getOrgId();

    case ORG_NAME:
      return getOrgName();

    case DATE:
      return getDate();

    case CHANNEL_COUNT:
      return getChannelCount();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case NAME:
      return isSetName();
    case EVENT_HUB_NAME:
      return isSetEventHubName();
    case LOCATION:
      return isSetLocation();
    case EVENT_HUB_LOCATION:
      return isSetEventHubLocation();
    case IS_EVENT_LISTENER:
      return isSetIsEventListener();
    case ORG_ID:
      return isSetOrgId();
    case ORG_NAME:
      return isSetOrgName();
    case DATE:
      return isSetDate();
    case CHANNEL_COUNT:
      return isSetChannelCount();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof PeerInfo)
      return this.equals((PeerInfo)that);
    return false;
  }

  public boolean equals(PeerInfo that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_id = true;
    boolean that_present_id = true;
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_eventHubName = true && this.isSetEventHubName();
    boolean that_present_eventHubName = true && that.isSetEventHubName();
    if (this_present_eventHubName || that_present_eventHubName) {
      if (!(this_present_eventHubName && that_present_eventHubName))
        return false;
      if (!this.eventHubName.equals(that.eventHubName))
        return false;
    }

    boolean this_present_location = true && this.isSetLocation();
    boolean that_present_location = true && that.isSetLocation();
    if (this_present_location || that_present_location) {
      if (!(this_present_location && that_present_location))
        return false;
      if (!this.location.equals(that.location))
        return false;
    }

    boolean this_present_eventHubLocation = true && this.isSetEventHubLocation();
    boolean that_present_eventHubLocation = true && that.isSetEventHubLocation();
    if (this_present_eventHubLocation || that_present_eventHubLocation) {
      if (!(this_present_eventHubLocation && that_present_eventHubLocation))
        return false;
      if (!this.eventHubLocation.equals(that.eventHubLocation))
        return false;
    }

    boolean this_present_isEventListener = true;
    boolean that_present_isEventListener = true;
    if (this_present_isEventListener || that_present_isEventListener) {
      if (!(this_present_isEventListener && that_present_isEventListener))
        return false;
      if (this.isEventListener != that.isEventListener)
        return false;
    }

    boolean this_present_orgId = true;
    boolean that_present_orgId = true;
    if (this_present_orgId || that_present_orgId) {
      if (!(this_present_orgId && that_present_orgId))
        return false;
      if (this.orgId != that.orgId)
        return false;
    }

    boolean this_present_orgName = true && this.isSetOrgName();
    boolean that_present_orgName = true && that.isSetOrgName();
    if (this_present_orgName || that_present_orgName) {
      if (!(this_present_orgName && that_present_orgName))
        return false;
      if (!this.orgName.equals(that.orgName))
        return false;
    }

    boolean this_present_date = true && this.isSetDate();
    boolean that_present_date = true && that.isSetDate();
    if (this_present_date || that_present_date) {
      if (!(this_present_date && that_present_date))
        return false;
      if (!this.date.equals(that.date))
        return false;
    }

    boolean this_present_channelCount = true;
    boolean that_present_channelCount = true;
    if (this_present_channelCount || that_present_channelCount) {
      if (!(this_present_channelCount && that_present_channelCount))
        return false;
      if (this.channelCount != that.channelCount)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + id;

    hashCode = hashCode * 8191 + ((isSetName()) ? 131071 : 524287);
    if (isSetName())
      hashCode = hashCode * 8191 + name.hashCode();

    hashCode = hashCode * 8191 + ((isSetEventHubName()) ? 131071 : 524287);
    if (isSetEventHubName())
      hashCode = hashCode * 8191 + eventHubName.hashCode();

    hashCode = hashCode * 8191 + ((isSetLocation()) ? 131071 : 524287);
    if (isSetLocation())
      hashCode = hashCode * 8191 + location.hashCode();

    hashCode = hashCode * 8191 + ((isSetEventHubLocation()) ? 131071 : 524287);
    if (isSetEventHubLocation())
      hashCode = hashCode * 8191 + eventHubLocation.hashCode();

    hashCode = hashCode * 8191 + ((isEventListener) ? 131071 : 524287);

    hashCode = hashCode * 8191 + orgId;

    hashCode = hashCode * 8191 + ((isSetOrgName()) ? 131071 : 524287);
    if (isSetOrgName())
      hashCode = hashCode * 8191 + orgName.hashCode();

    hashCode = hashCode * 8191 + ((isSetDate()) ? 131071 : 524287);
    if (isSetDate())
      hashCode = hashCode * 8191 + date.hashCode();

    hashCode = hashCode * 8191 + channelCount;

    return hashCode;
  }

  @Override
  public int compareTo(PeerInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetName()).compareTo(other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetEventHubName()).compareTo(other.isSetEventHubName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEventHubName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eventHubName, other.eventHubName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetLocation()).compareTo(other.isSetLocation());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLocation()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.location, other.location);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetEventHubLocation()).compareTo(other.isSetEventHubLocation());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEventHubLocation()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eventHubLocation, other.eventHubLocation);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetIsEventListener()).compareTo(other.isSetIsEventListener());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsEventListener()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isEventListener, other.isEventListener);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetOrgId()).compareTo(other.isSetOrgId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrgId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orgId, other.orgId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetOrgName()).compareTo(other.isSetOrgName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrgName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orgName, other.orgName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetDate()).compareTo(other.isSetDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.date, other.date);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetChannelCount()).compareTo(other.isSetChannelCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChannelCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.channelCount, other.channelCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("PeerInfo(");
    boolean first = true;

    sb.append("id:");
    sb.append(this.id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("name:");
    if (this.name == null) {
      sb.append("null");
    } else {
      sb.append(this.name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("eventHubName:");
    if (this.eventHubName == null) {
      sb.append("null");
    } else {
      sb.append(this.eventHubName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("location:");
    if (this.location == null) {
      sb.append("null");
    } else {
      sb.append(this.location);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("eventHubLocation:");
    if (this.eventHubLocation == null) {
      sb.append("null");
    } else {
      sb.append(this.eventHubLocation);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("isEventListener:");
    sb.append(this.isEventListener);
    first = false;
    if (!first) sb.append(", ");
    sb.append("orgId:");
    sb.append(this.orgId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("orgName:");
    if (this.orgName == null) {
      sb.append("null");
    } else {
      sb.append(this.orgName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("date:");
    if (this.date == null) {
      sb.append("null");
    } else {
      sb.append(this.date);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("channelCount:");
    sb.append(this.channelCount);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class PeerInfoStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public PeerInfoStandardScheme getScheme() {
      return new PeerInfoStandardScheme();
    }
  }

  private static class PeerInfoStandardScheme extends org.apache.thrift.scheme.StandardScheme<PeerInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, PeerInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.id = iprot.readI32();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // EVENT_HUB_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.eventHubName = iprot.readString();
              struct.setEventHubNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // LOCATION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.location = iprot.readString();
              struct.setLocationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // EVENT_HUB_LOCATION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.eventHubLocation = iprot.readString();
              struct.setEventHubLocationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // IS_EVENT_LISTENER
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isEventListener = iprot.readBool();
              struct.setIsEventListenerIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // ORG_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.orgId = iprot.readI32();
              struct.setOrgIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // ORG_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.orgName = iprot.readString();
              struct.setOrgNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.date = iprot.readString();
              struct.setDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // CHANNEL_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.channelCount = iprot.readI32();
              struct.setChannelCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, PeerInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeI32(struct.id);
      oprot.writeFieldEnd();
      if (struct.name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(struct.name);
        oprot.writeFieldEnd();
      }
      if (struct.eventHubName != null) {
        oprot.writeFieldBegin(EVENT_HUB_NAME_FIELD_DESC);
        oprot.writeString(struct.eventHubName);
        oprot.writeFieldEnd();
      }
      if (struct.location != null) {
        oprot.writeFieldBegin(LOCATION_FIELD_DESC);
        oprot.writeString(struct.location);
        oprot.writeFieldEnd();
      }
      if (struct.eventHubLocation != null) {
        oprot.writeFieldBegin(EVENT_HUB_LOCATION_FIELD_DESC);
        oprot.writeString(struct.eventHubLocation);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(IS_EVENT_LISTENER_FIELD_DESC);
      oprot.writeBool(struct.isEventListener);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ORG_ID_FIELD_DESC);
      oprot.writeI32(struct.orgId);
      oprot.writeFieldEnd();
      if (struct.orgName != null) {
        oprot.writeFieldBegin(ORG_NAME_FIELD_DESC);
        oprot.writeString(struct.orgName);
        oprot.writeFieldEnd();
      }
      if (struct.date != null) {
        oprot.writeFieldBegin(DATE_FIELD_DESC);
        oprot.writeString(struct.date);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CHANNEL_COUNT_FIELD_DESC);
      oprot.writeI32(struct.channelCount);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class PeerInfoTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public PeerInfoTupleScheme getScheme() {
      return new PeerInfoTupleScheme();
    }
  }

  private static class PeerInfoTupleScheme extends org.apache.thrift.scheme.TupleScheme<PeerInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, PeerInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetName()) {
        optionals.set(1);
      }
      if (struct.isSetEventHubName()) {
        optionals.set(2);
      }
      if (struct.isSetLocation()) {
        optionals.set(3);
      }
      if (struct.isSetEventHubLocation()) {
        optionals.set(4);
      }
      if (struct.isSetIsEventListener()) {
        optionals.set(5);
      }
      if (struct.isSetOrgId()) {
        optionals.set(6);
      }
      if (struct.isSetOrgName()) {
        optionals.set(7);
      }
      if (struct.isSetDate()) {
        optionals.set(8);
      }
      if (struct.isSetChannelCount()) {
        optionals.set(9);
      }
      oprot.writeBitSet(optionals, 10);
      if (struct.isSetId()) {
        oprot.writeI32(struct.id);
      }
      if (struct.isSetName()) {
        oprot.writeString(struct.name);
      }
      if (struct.isSetEventHubName()) {
        oprot.writeString(struct.eventHubName);
      }
      if (struct.isSetLocation()) {
        oprot.writeString(struct.location);
      }
      if (struct.isSetEventHubLocation()) {
        oprot.writeString(struct.eventHubLocation);
      }
      if (struct.isSetIsEventListener()) {
        oprot.writeBool(struct.isEventListener);
      }
      if (struct.isSetOrgId()) {
        oprot.writeI32(struct.orgId);
      }
      if (struct.isSetOrgName()) {
        oprot.writeString(struct.orgName);
      }
      if (struct.isSetDate()) {
        oprot.writeString(struct.date);
      }
      if (struct.isSetChannelCount()) {
        oprot.writeI32(struct.channelCount);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, PeerInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(10);
      if (incoming.get(0)) {
        struct.id = iprot.readI32();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.eventHubName = iprot.readString();
        struct.setEventHubNameIsSet(true);
      }
      if (incoming.get(3)) {
        struct.location = iprot.readString();
        struct.setLocationIsSet(true);
      }
      if (incoming.get(4)) {
        struct.eventHubLocation = iprot.readString();
        struct.setEventHubLocationIsSet(true);
      }
      if (incoming.get(5)) {
        struct.isEventListener = iprot.readBool();
        struct.setIsEventListenerIsSet(true);
      }
      if (incoming.get(6)) {
        struct.orgId = iprot.readI32();
        struct.setOrgIdIsSet(true);
      }
      if (incoming.get(7)) {
        struct.orgName = iprot.readString();
        struct.setOrgNameIsSet(true);
      }
      if (incoming.get(8)) {
        struct.date = iprot.readString();
        struct.setDateIsSet(true);
      }
      if (incoming.get(9)) {
        struct.channelCount = iprot.readI32();
        struct.setChannelCountIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

