/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package cn.aberic.thrift.org;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2018-06-23")
public class OrgInfo implements org.apache.thrift.TBase<OrgInfo, OrgInfo._Fields>, java.io.Serializable, Cloneable, Comparable<OrgInfo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("OrgInfo");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField TLS_FIELD_DESC = new org.apache.thrift.protocol.TField("tls", org.apache.thrift.protocol.TType.BOOL, (short)3);
  private static final org.apache.thrift.protocol.TField USERNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("username", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField CRYPTO_CONFIG_DIR_FIELD_DESC = new org.apache.thrift.protocol.TField("cryptoConfigDir", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField MSP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("mspId", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField DOMAIN_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("domainName", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField ORDERER_DOMAIN_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("ordererDomainName", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField LEAGUE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("leagueId", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField LEAGUE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("leagueName", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("date", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField PEER_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("peerCount", org.apache.thrift.protocol.TType.I32, (short)12);
  private static final org.apache.thrift.protocol.TField ORDERER_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("ordererCount", org.apache.thrift.protocol.TType.I32, (short)13);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new OrgInfoStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new OrgInfoTupleSchemeFactory();

  public int id; // required
  public java.lang.String name; // required
  public boolean tls; // required
  public java.lang.String username; // required
  public java.lang.String cryptoConfigDir; // required
  public java.lang.String mspId; // required
  public java.lang.String domainName; // required
  public java.lang.String ordererDomainName; // required
  public int leagueId; // required
  public java.lang.String leagueName; // required
  public java.lang.String date; // required
  public int peerCount; // required
  public int ordererCount; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    NAME((short)2, "name"),
    TLS((short)3, "tls"),
    USERNAME((short)4, "username"),
    CRYPTO_CONFIG_DIR((short)5, "cryptoConfigDir"),
    MSP_ID((short)6, "mspId"),
    DOMAIN_NAME((short)7, "domainName"),
    ORDERER_DOMAIN_NAME((short)8, "ordererDomainName"),
    LEAGUE_ID((short)9, "leagueId"),
    LEAGUE_NAME((short)10, "leagueName"),
    DATE((short)11, "date"),
    PEER_COUNT((short)12, "peerCount"),
    ORDERER_COUNT((short)13, "ordererCount");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // NAME
          return NAME;
        case 3: // TLS
          return TLS;
        case 4: // USERNAME
          return USERNAME;
        case 5: // CRYPTO_CONFIG_DIR
          return CRYPTO_CONFIG_DIR;
        case 6: // MSP_ID
          return MSP_ID;
        case 7: // DOMAIN_NAME
          return DOMAIN_NAME;
        case 8: // ORDERER_DOMAIN_NAME
          return ORDERER_DOMAIN_NAME;
        case 9: // LEAGUE_ID
          return LEAGUE_ID;
        case 10: // LEAGUE_NAME
          return LEAGUE_NAME;
        case 11: // DATE
          return DATE;
        case 12: // PEER_COUNT
          return PEER_COUNT;
        case 13: // ORDERER_COUNT
          return ORDERER_COUNT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __TLS_ISSET_ID = 1;
  private static final int __LEAGUEID_ISSET_ID = 2;
  private static final int __PEERCOUNT_ISSET_ID = 3;
  private static final int __ORDERERCOUNT_ISSET_ID = 4;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TLS, new org.apache.thrift.meta_data.FieldMetaData("tls", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.USERNAME, new org.apache.thrift.meta_data.FieldMetaData("username", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CRYPTO_CONFIG_DIR, new org.apache.thrift.meta_data.FieldMetaData("cryptoConfigDir", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MSP_ID, new org.apache.thrift.meta_data.FieldMetaData("mspId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DOMAIN_NAME, new org.apache.thrift.meta_data.FieldMetaData("domainName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ORDERER_DOMAIN_NAME, new org.apache.thrift.meta_data.FieldMetaData("ordererDomainName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LEAGUE_ID, new org.apache.thrift.meta_data.FieldMetaData("leagueId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LEAGUE_NAME, new org.apache.thrift.meta_data.FieldMetaData("leagueName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DATE, new org.apache.thrift.meta_data.FieldMetaData("date", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PEER_COUNT, new org.apache.thrift.meta_data.FieldMetaData("peerCount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ORDERER_COUNT, new org.apache.thrift.meta_data.FieldMetaData("ordererCount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(OrgInfo.class, metaDataMap);
  }

  public OrgInfo() {
  }

  public OrgInfo(
    int id,
    java.lang.String name,
    boolean tls,
    java.lang.String username,
    java.lang.String cryptoConfigDir,
    java.lang.String mspId,
    java.lang.String domainName,
    java.lang.String ordererDomainName,
    int leagueId,
    java.lang.String leagueName,
    java.lang.String date,
    int peerCount,
    int ordererCount)
  {
    this();
    this.id = id;
    setIdIsSet(true);
    this.name = name;
    this.tls = tls;
    setTlsIsSet(true);
    this.username = username;
    this.cryptoConfigDir = cryptoConfigDir;
    this.mspId = mspId;
    this.domainName = domainName;
    this.ordererDomainName = ordererDomainName;
    this.leagueId = leagueId;
    setLeagueIdIsSet(true);
    this.leagueName = leagueName;
    this.date = date;
    this.peerCount = peerCount;
    setPeerCountIsSet(true);
    this.ordererCount = ordererCount;
    setOrdererCountIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public OrgInfo(OrgInfo other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    if (other.isSetName()) {
      this.name = other.name;
    }
    this.tls = other.tls;
    if (other.isSetUsername()) {
      this.username = other.username;
    }
    if (other.isSetCryptoConfigDir()) {
      this.cryptoConfigDir = other.cryptoConfigDir;
    }
    if (other.isSetMspId()) {
      this.mspId = other.mspId;
    }
    if (other.isSetDomainName()) {
      this.domainName = other.domainName;
    }
    if (other.isSetOrdererDomainName()) {
      this.ordererDomainName = other.ordererDomainName;
    }
    this.leagueId = other.leagueId;
    if (other.isSetLeagueName()) {
      this.leagueName = other.leagueName;
    }
    if (other.isSetDate()) {
      this.date = other.date;
    }
    this.peerCount = other.peerCount;
    this.ordererCount = other.ordererCount;
  }

  public OrgInfo deepCopy() {
    return new OrgInfo(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    this.name = null;
    setTlsIsSet(false);
    this.tls = false;
    this.username = null;
    this.cryptoConfigDir = null;
    this.mspId = null;
    this.domainName = null;
    this.ordererDomainName = null;
    setLeagueIdIsSet(false);
    this.leagueId = 0;
    this.leagueName = null;
    this.date = null;
    setPeerCountIsSet(false);
    this.peerCount = 0;
    setOrdererCountIsSet(false);
    this.ordererCount = 0;
  }

  public int getId() {
    return this.id;
  }

  public OrgInfo setId(int id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public java.lang.String getName() {
    return this.name;
  }

  public OrgInfo setName(java.lang.String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public boolean isTls() {
    return this.tls;
  }

  public OrgInfo setTls(boolean tls) {
    this.tls = tls;
    setTlsIsSet(true);
    return this;
  }

  public void unsetTls() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TLS_ISSET_ID);
  }

  /** Returns true if field tls is set (has been assigned a value) and false otherwise */
  public boolean isSetTls() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TLS_ISSET_ID);
  }

  public void setTlsIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TLS_ISSET_ID, value);
  }

  public java.lang.String getUsername() {
    return this.username;
  }

  public OrgInfo setUsername(java.lang.String username) {
    this.username = username;
    return this;
  }

  public void unsetUsername() {
    this.username = null;
  }

  /** Returns true if field username is set (has been assigned a value) and false otherwise */
  public boolean isSetUsername() {
    return this.username != null;
  }

  public void setUsernameIsSet(boolean value) {
    if (!value) {
      this.username = null;
    }
  }

  public java.lang.String getCryptoConfigDir() {
    return this.cryptoConfigDir;
  }

  public OrgInfo setCryptoConfigDir(java.lang.String cryptoConfigDir) {
    this.cryptoConfigDir = cryptoConfigDir;
    return this;
  }

  public void unsetCryptoConfigDir() {
    this.cryptoConfigDir = null;
  }

  /** Returns true if field cryptoConfigDir is set (has been assigned a value) and false otherwise */
  public boolean isSetCryptoConfigDir() {
    return this.cryptoConfigDir != null;
  }

  public void setCryptoConfigDirIsSet(boolean value) {
    if (!value) {
      this.cryptoConfigDir = null;
    }
  }

  public java.lang.String getMspId() {
    return this.mspId;
  }

  public OrgInfo setMspId(java.lang.String mspId) {
    this.mspId = mspId;
    return this;
  }

  public void unsetMspId() {
    this.mspId = null;
  }

  /** Returns true if field mspId is set (has been assigned a value) and false otherwise */
  public boolean isSetMspId() {
    return this.mspId != null;
  }

  public void setMspIdIsSet(boolean value) {
    if (!value) {
      this.mspId = null;
    }
  }

  public java.lang.String getDomainName() {
    return this.domainName;
  }

  public OrgInfo setDomainName(java.lang.String domainName) {
    this.domainName = domainName;
    return this;
  }

  public void unsetDomainName() {
    this.domainName = null;
  }

  /** Returns true if field domainName is set (has been assigned a value) and false otherwise */
  public boolean isSetDomainName() {
    return this.domainName != null;
  }

  public void setDomainNameIsSet(boolean value) {
    if (!value) {
      this.domainName = null;
    }
  }

  public java.lang.String getOrdererDomainName() {
    return this.ordererDomainName;
  }

  public OrgInfo setOrdererDomainName(java.lang.String ordererDomainName) {
    this.ordererDomainName = ordererDomainName;
    return this;
  }

  public void unsetOrdererDomainName() {
    this.ordererDomainName = null;
  }

  /** Returns true if field ordererDomainName is set (has been assigned a value) and false otherwise */
  public boolean isSetOrdererDomainName() {
    return this.ordererDomainName != null;
  }

  public void setOrdererDomainNameIsSet(boolean value) {
    if (!value) {
      this.ordererDomainName = null;
    }
  }

  public int getLeagueId() {
    return this.leagueId;
  }

  public OrgInfo setLeagueId(int leagueId) {
    this.leagueId = leagueId;
    setLeagueIdIsSet(true);
    return this;
  }

  public void unsetLeagueId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __LEAGUEID_ISSET_ID);
  }

  /** Returns true if field leagueId is set (has been assigned a value) and false otherwise */
  public boolean isSetLeagueId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __LEAGUEID_ISSET_ID);
  }

  public void setLeagueIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __LEAGUEID_ISSET_ID, value);
  }

  public java.lang.String getLeagueName() {
    return this.leagueName;
  }

  public OrgInfo setLeagueName(java.lang.String leagueName) {
    this.leagueName = leagueName;
    return this;
  }

  public void unsetLeagueName() {
    this.leagueName = null;
  }

  /** Returns true if field leagueName is set (has been assigned a value) and false otherwise */
  public boolean isSetLeagueName() {
    return this.leagueName != null;
  }

  public void setLeagueNameIsSet(boolean value) {
    if (!value) {
      this.leagueName = null;
    }
  }

  public java.lang.String getDate() {
    return this.date;
  }

  public OrgInfo setDate(java.lang.String date) {
    this.date = date;
    return this;
  }

  public void unsetDate() {
    this.date = null;
  }

  /** Returns true if field date is set (has been assigned a value) and false otherwise */
  public boolean isSetDate() {
    return this.date != null;
  }

  public void setDateIsSet(boolean value) {
    if (!value) {
      this.date = null;
    }
  }

  public int getPeerCount() {
    return this.peerCount;
  }

  public OrgInfo setPeerCount(int peerCount) {
    this.peerCount = peerCount;
    setPeerCountIsSet(true);
    return this;
  }

  public void unsetPeerCount() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PEERCOUNT_ISSET_ID);
  }

  /** Returns true if field peerCount is set (has been assigned a value) and false otherwise */
  public boolean isSetPeerCount() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PEERCOUNT_ISSET_ID);
  }

  public void setPeerCountIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PEERCOUNT_ISSET_ID, value);
  }

  public int getOrdererCount() {
    return this.ordererCount;
  }

  public OrgInfo setOrdererCount(int ordererCount) {
    this.ordererCount = ordererCount;
    setOrdererCountIsSet(true);
    return this;
  }

  public void unsetOrdererCount() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ORDERERCOUNT_ISSET_ID);
  }

  /** Returns true if field ordererCount is set (has been assigned a value) and false otherwise */
  public boolean isSetOrdererCount() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ORDERERCOUNT_ISSET_ID);
  }

  public void setOrdererCountIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ORDERERCOUNT_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((java.lang.Integer)value);
      }
      break;

    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((java.lang.String)value);
      }
      break;

    case TLS:
      if (value == null) {
        unsetTls();
      } else {
        setTls((java.lang.Boolean)value);
      }
      break;

    case USERNAME:
      if (value == null) {
        unsetUsername();
      } else {
        setUsername((java.lang.String)value);
      }
      break;

    case CRYPTO_CONFIG_DIR:
      if (value == null) {
        unsetCryptoConfigDir();
      } else {
        setCryptoConfigDir((java.lang.String)value);
      }
      break;

    case MSP_ID:
      if (value == null) {
        unsetMspId();
      } else {
        setMspId((java.lang.String)value);
      }
      break;

    case DOMAIN_NAME:
      if (value == null) {
        unsetDomainName();
      } else {
        setDomainName((java.lang.String)value);
      }
      break;

    case ORDERER_DOMAIN_NAME:
      if (value == null) {
        unsetOrdererDomainName();
      } else {
        setOrdererDomainName((java.lang.String)value);
      }
      break;

    case LEAGUE_ID:
      if (value == null) {
        unsetLeagueId();
      } else {
        setLeagueId((java.lang.Integer)value);
      }
      break;

    case LEAGUE_NAME:
      if (value == null) {
        unsetLeagueName();
      } else {
        setLeagueName((java.lang.String)value);
      }
      break;

    case DATE:
      if (value == null) {
        unsetDate();
      } else {
        setDate((java.lang.String)value);
      }
      break;

    case PEER_COUNT:
      if (value == null) {
        unsetPeerCount();
      } else {
        setPeerCount((java.lang.Integer)value);
      }
      break;

    case ORDERER_COUNT:
      if (value == null) {
        unsetOrdererCount();
      } else {
        setOrdererCount((java.lang.Integer)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case NAME:
      return getName();

    case TLS:
      return isTls();

    case USERNAME:
      return getUsername();

    case CRYPTO_CONFIG_DIR:
      return getCryptoConfigDir();

    case MSP_ID:
      return getMspId();

    case DOMAIN_NAME:
      return getDomainName();

    case ORDERER_DOMAIN_NAME:
      return getOrdererDomainName();

    case LEAGUE_ID:
      return getLeagueId();

    case LEAGUE_NAME:
      return getLeagueName();

    case DATE:
      return getDate();

    case PEER_COUNT:
      return getPeerCount();

    case ORDERER_COUNT:
      return getOrdererCount();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case NAME:
      return isSetName();
    case TLS:
      return isSetTls();
    case USERNAME:
      return isSetUsername();
    case CRYPTO_CONFIG_DIR:
      return isSetCryptoConfigDir();
    case MSP_ID:
      return isSetMspId();
    case DOMAIN_NAME:
      return isSetDomainName();
    case ORDERER_DOMAIN_NAME:
      return isSetOrdererDomainName();
    case LEAGUE_ID:
      return isSetLeagueId();
    case LEAGUE_NAME:
      return isSetLeagueName();
    case DATE:
      return isSetDate();
    case PEER_COUNT:
      return isSetPeerCount();
    case ORDERER_COUNT:
      return isSetOrdererCount();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof OrgInfo)
      return this.equals((OrgInfo)that);
    return false;
  }

  public boolean equals(OrgInfo that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_id = true;
    boolean that_present_id = true;
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_tls = true;
    boolean that_present_tls = true;
    if (this_present_tls || that_present_tls) {
      if (!(this_present_tls && that_present_tls))
        return false;
      if (this.tls != that.tls)
        return false;
    }

    boolean this_present_username = true && this.isSetUsername();
    boolean that_present_username = true && that.isSetUsername();
    if (this_present_username || that_present_username) {
      if (!(this_present_username && that_present_username))
        return false;
      if (!this.username.equals(that.username))
        return false;
    }

    boolean this_present_cryptoConfigDir = true && this.isSetCryptoConfigDir();
    boolean that_present_cryptoConfigDir = true && that.isSetCryptoConfigDir();
    if (this_present_cryptoConfigDir || that_present_cryptoConfigDir) {
      if (!(this_present_cryptoConfigDir && that_present_cryptoConfigDir))
        return false;
      if (!this.cryptoConfigDir.equals(that.cryptoConfigDir))
        return false;
    }

    boolean this_present_mspId = true && this.isSetMspId();
    boolean that_present_mspId = true && that.isSetMspId();
    if (this_present_mspId || that_present_mspId) {
      if (!(this_present_mspId && that_present_mspId))
        return false;
      if (!this.mspId.equals(that.mspId))
        return false;
    }

    boolean this_present_domainName = true && this.isSetDomainName();
    boolean that_present_domainName = true && that.isSetDomainName();
    if (this_present_domainName || that_present_domainName) {
      if (!(this_present_domainName && that_present_domainName))
        return false;
      if (!this.domainName.equals(that.domainName))
        return false;
    }

    boolean this_present_ordererDomainName = true && this.isSetOrdererDomainName();
    boolean that_present_ordererDomainName = true && that.isSetOrdererDomainName();
    if (this_present_ordererDomainName || that_present_ordererDomainName) {
      if (!(this_present_ordererDomainName && that_present_ordererDomainName))
        return false;
      if (!this.ordererDomainName.equals(that.ordererDomainName))
        return false;
    }

    boolean this_present_leagueId = true;
    boolean that_present_leagueId = true;
    if (this_present_leagueId || that_present_leagueId) {
      if (!(this_present_leagueId && that_present_leagueId))
        return false;
      if (this.leagueId != that.leagueId)
        return false;
    }

    boolean this_present_leagueName = true && this.isSetLeagueName();
    boolean that_present_leagueName = true && that.isSetLeagueName();
    if (this_present_leagueName || that_present_leagueName) {
      if (!(this_present_leagueName && that_present_leagueName))
        return false;
      if (!this.leagueName.equals(that.leagueName))
        return false;
    }

    boolean this_present_date = true && this.isSetDate();
    boolean that_present_date = true && that.isSetDate();
    if (this_present_date || that_present_date) {
      if (!(this_present_date && that_present_date))
        return false;
      if (!this.date.equals(that.date))
        return false;
    }

    boolean this_present_peerCount = true;
    boolean that_present_peerCount = true;
    if (this_present_peerCount || that_present_peerCount) {
      if (!(this_present_peerCount && that_present_peerCount))
        return false;
      if (this.peerCount != that.peerCount)
        return false;
    }

    boolean this_present_ordererCount = true;
    boolean that_present_ordererCount = true;
    if (this_present_ordererCount || that_present_ordererCount) {
      if (!(this_present_ordererCount && that_present_ordererCount))
        return false;
      if (this.ordererCount != that.ordererCount)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + id;

    hashCode = hashCode * 8191 + ((isSetName()) ? 131071 : 524287);
    if (isSetName())
      hashCode = hashCode * 8191 + name.hashCode();

    hashCode = hashCode * 8191 + ((tls) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetUsername()) ? 131071 : 524287);
    if (isSetUsername())
      hashCode = hashCode * 8191 + username.hashCode();

    hashCode = hashCode * 8191 + ((isSetCryptoConfigDir()) ? 131071 : 524287);
    if (isSetCryptoConfigDir())
      hashCode = hashCode * 8191 + cryptoConfigDir.hashCode();

    hashCode = hashCode * 8191 + ((isSetMspId()) ? 131071 : 524287);
    if (isSetMspId())
      hashCode = hashCode * 8191 + mspId.hashCode();

    hashCode = hashCode * 8191 + ((isSetDomainName()) ? 131071 : 524287);
    if (isSetDomainName())
      hashCode = hashCode * 8191 + domainName.hashCode();

    hashCode = hashCode * 8191 + ((isSetOrdererDomainName()) ? 131071 : 524287);
    if (isSetOrdererDomainName())
      hashCode = hashCode * 8191 + ordererDomainName.hashCode();

    hashCode = hashCode * 8191 + leagueId;

    hashCode = hashCode * 8191 + ((isSetLeagueName()) ? 131071 : 524287);
    if (isSetLeagueName())
      hashCode = hashCode * 8191 + leagueName.hashCode();

    hashCode = hashCode * 8191 + ((isSetDate()) ? 131071 : 524287);
    if (isSetDate())
      hashCode = hashCode * 8191 + date.hashCode();

    hashCode = hashCode * 8191 + peerCount;

    hashCode = hashCode * 8191 + ordererCount;

    return hashCode;
  }

  @Override
  public int compareTo(OrgInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetName()).compareTo(other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTls()).compareTo(other.isSetTls());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTls()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tls, other.tls);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetUsername()).compareTo(other.isSetUsername());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUsername()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.username, other.username);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCryptoConfigDir()).compareTo(other.isSetCryptoConfigDir());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCryptoConfigDir()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cryptoConfigDir, other.cryptoConfigDir);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetMspId()).compareTo(other.isSetMspId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMspId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mspId, other.mspId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetDomainName()).compareTo(other.isSetDomainName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDomainName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.domainName, other.domainName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetOrdererDomainName()).compareTo(other.isSetOrdererDomainName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrdererDomainName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ordererDomainName, other.ordererDomainName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetLeagueId()).compareTo(other.isSetLeagueId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLeagueId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.leagueId, other.leagueId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetLeagueName()).compareTo(other.isSetLeagueName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLeagueName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.leagueName, other.leagueName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetDate()).compareTo(other.isSetDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.date, other.date);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetPeerCount()).compareTo(other.isSetPeerCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPeerCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.peerCount, other.peerCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetOrdererCount()).compareTo(other.isSetOrdererCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrdererCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ordererCount, other.ordererCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("OrgInfo(");
    boolean first = true;

    sb.append("id:");
    sb.append(this.id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("name:");
    if (this.name == null) {
      sb.append("null");
    } else {
      sb.append(this.name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("tls:");
    sb.append(this.tls);
    first = false;
    if (!first) sb.append(", ");
    sb.append("username:");
    if (this.username == null) {
      sb.append("null");
    } else {
      sb.append(this.username);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("cryptoConfigDir:");
    if (this.cryptoConfigDir == null) {
      sb.append("null");
    } else {
      sb.append(this.cryptoConfigDir);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("mspId:");
    if (this.mspId == null) {
      sb.append("null");
    } else {
      sb.append(this.mspId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("domainName:");
    if (this.domainName == null) {
      sb.append("null");
    } else {
      sb.append(this.domainName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("ordererDomainName:");
    if (this.ordererDomainName == null) {
      sb.append("null");
    } else {
      sb.append(this.ordererDomainName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("leagueId:");
    sb.append(this.leagueId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("leagueName:");
    if (this.leagueName == null) {
      sb.append("null");
    } else {
      sb.append(this.leagueName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("date:");
    if (this.date == null) {
      sb.append("null");
    } else {
      sb.append(this.date);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("peerCount:");
    sb.append(this.peerCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("ordererCount:");
    sb.append(this.ordererCount);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class OrgInfoStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public OrgInfoStandardScheme getScheme() {
      return new OrgInfoStandardScheme();
    }
  }

  private static class OrgInfoStandardScheme extends org.apache.thrift.scheme.StandardScheme<OrgInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, OrgInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.id = iprot.readI32();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TLS
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.tls = iprot.readBool();
              struct.setTlsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // USERNAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.username = iprot.readString();
              struct.setUsernameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // CRYPTO_CONFIG_DIR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.cryptoConfigDir = iprot.readString();
              struct.setCryptoConfigDirIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // MSP_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.mspId = iprot.readString();
              struct.setMspIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // DOMAIN_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.domainName = iprot.readString();
              struct.setDomainNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // ORDERER_DOMAIN_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ordererDomainName = iprot.readString();
              struct.setOrdererDomainNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // LEAGUE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.leagueId = iprot.readI32();
              struct.setLeagueIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // LEAGUE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.leagueName = iprot.readString();
              struct.setLeagueNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.date = iprot.readString();
              struct.setDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // PEER_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.peerCount = iprot.readI32();
              struct.setPeerCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // ORDERER_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.ordererCount = iprot.readI32();
              struct.setOrdererCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, OrgInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeI32(struct.id);
      oprot.writeFieldEnd();
      if (struct.name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(struct.name);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(TLS_FIELD_DESC);
      oprot.writeBool(struct.tls);
      oprot.writeFieldEnd();
      if (struct.username != null) {
        oprot.writeFieldBegin(USERNAME_FIELD_DESC);
        oprot.writeString(struct.username);
        oprot.writeFieldEnd();
      }
      if (struct.cryptoConfigDir != null) {
        oprot.writeFieldBegin(CRYPTO_CONFIG_DIR_FIELD_DESC);
        oprot.writeString(struct.cryptoConfigDir);
        oprot.writeFieldEnd();
      }
      if (struct.mspId != null) {
        oprot.writeFieldBegin(MSP_ID_FIELD_DESC);
        oprot.writeString(struct.mspId);
        oprot.writeFieldEnd();
      }
      if (struct.domainName != null) {
        oprot.writeFieldBegin(DOMAIN_NAME_FIELD_DESC);
        oprot.writeString(struct.domainName);
        oprot.writeFieldEnd();
      }
      if (struct.ordererDomainName != null) {
        oprot.writeFieldBegin(ORDERER_DOMAIN_NAME_FIELD_DESC);
        oprot.writeString(struct.ordererDomainName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(LEAGUE_ID_FIELD_DESC);
      oprot.writeI32(struct.leagueId);
      oprot.writeFieldEnd();
      if (struct.leagueName != null) {
        oprot.writeFieldBegin(LEAGUE_NAME_FIELD_DESC);
        oprot.writeString(struct.leagueName);
        oprot.writeFieldEnd();
      }
      if (struct.date != null) {
        oprot.writeFieldBegin(DATE_FIELD_DESC);
        oprot.writeString(struct.date);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PEER_COUNT_FIELD_DESC);
      oprot.writeI32(struct.peerCount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ORDERER_COUNT_FIELD_DESC);
      oprot.writeI32(struct.ordererCount);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class OrgInfoTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public OrgInfoTupleScheme getScheme() {
      return new OrgInfoTupleScheme();
    }
  }

  private static class OrgInfoTupleScheme extends org.apache.thrift.scheme.TupleScheme<OrgInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, OrgInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetName()) {
        optionals.set(1);
      }
      if (struct.isSetTls()) {
        optionals.set(2);
      }
      if (struct.isSetUsername()) {
        optionals.set(3);
      }
      if (struct.isSetCryptoConfigDir()) {
        optionals.set(4);
      }
      if (struct.isSetMspId()) {
        optionals.set(5);
      }
      if (struct.isSetDomainName()) {
        optionals.set(6);
      }
      if (struct.isSetOrdererDomainName()) {
        optionals.set(7);
      }
      if (struct.isSetLeagueId()) {
        optionals.set(8);
      }
      if (struct.isSetLeagueName()) {
        optionals.set(9);
      }
      if (struct.isSetDate()) {
        optionals.set(10);
      }
      if (struct.isSetPeerCount()) {
        optionals.set(11);
      }
      if (struct.isSetOrdererCount()) {
        optionals.set(12);
      }
      oprot.writeBitSet(optionals, 13);
      if (struct.isSetId()) {
        oprot.writeI32(struct.id);
      }
      if (struct.isSetName()) {
        oprot.writeString(struct.name);
      }
      if (struct.isSetTls()) {
        oprot.writeBool(struct.tls);
      }
      if (struct.isSetUsername()) {
        oprot.writeString(struct.username);
      }
      if (struct.isSetCryptoConfigDir()) {
        oprot.writeString(struct.cryptoConfigDir);
      }
      if (struct.isSetMspId()) {
        oprot.writeString(struct.mspId);
      }
      if (struct.isSetDomainName()) {
        oprot.writeString(struct.domainName);
      }
      if (struct.isSetOrdererDomainName()) {
        oprot.writeString(struct.ordererDomainName);
      }
      if (struct.isSetLeagueId()) {
        oprot.writeI32(struct.leagueId);
      }
      if (struct.isSetLeagueName()) {
        oprot.writeString(struct.leagueName);
      }
      if (struct.isSetDate()) {
        oprot.writeString(struct.date);
      }
      if (struct.isSetPeerCount()) {
        oprot.writeI32(struct.peerCount);
      }
      if (struct.isSetOrdererCount()) {
        oprot.writeI32(struct.ordererCount);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, OrgInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(13);
      if (incoming.get(0)) {
        struct.id = iprot.readI32();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.tls = iprot.readBool();
        struct.setTlsIsSet(true);
      }
      if (incoming.get(3)) {
        struct.username = iprot.readString();
        struct.setUsernameIsSet(true);
      }
      if (incoming.get(4)) {
        struct.cryptoConfigDir = iprot.readString();
        struct.setCryptoConfigDirIsSet(true);
      }
      if (incoming.get(5)) {
        struct.mspId = iprot.readString();
        struct.setMspIdIsSet(true);
      }
      if (incoming.get(6)) {
        struct.domainName = iprot.readString();
        struct.setDomainNameIsSet(true);
      }
      if (incoming.get(7)) {
        struct.ordererDomainName = iprot.readString();
        struct.setOrdererDomainNameIsSet(true);
      }
      if (incoming.get(8)) {
        struct.leagueId = iprot.readI32();
        struct.setLeagueIdIsSet(true);
      }
      if (incoming.get(9)) {
        struct.leagueName = iprot.readString();
        struct.setLeagueNameIsSet(true);
      }
      if (incoming.get(10)) {
        struct.date = iprot.readString();
        struct.setDateIsSet(true);
      }
      if (incoming.get(11)) {
        struct.peerCount = iprot.readI32();
        struct.setPeerCountIsSet(true);
      }
      if (incoming.get(12)) {
        struct.ordererCount = iprot.readI32();
        struct.setOrdererCountIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

