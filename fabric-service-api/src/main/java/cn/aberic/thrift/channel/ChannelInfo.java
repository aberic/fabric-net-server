/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package cn.aberic.thrift.channel;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2018-06-22")
public class ChannelInfo implements org.apache.thrift.TBase<ChannelInfo, ChannelInfo._Fields>, java.io.Serializable, Cloneable, Comparable<ChannelInfo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ChannelInfo");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField PEER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("peerId", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("date", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField PEER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("peerName", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField ORG_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("orgName", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField LEAGUE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("leagueName", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField CHAINCODE_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("chaincodeCount", org.apache.thrift.protocol.TType.I32, (short)8);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ChannelInfoStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ChannelInfoTupleSchemeFactory();

  public int id; // required
  public java.lang.String name; // required
  public int peerId; // required
  public java.lang.String date; // optional
  public java.lang.String peerName; // optional
  public java.lang.String orgName; // optional
  public java.lang.String leagueName; // optional
  public int chaincodeCount; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    NAME((short)2, "name"),
    PEER_ID((short)3, "peerId"),
    DATE((short)4, "date"),
    PEER_NAME((short)5, "peerName"),
    ORG_NAME((short)6, "orgName"),
    LEAGUE_NAME((short)7, "leagueName"),
    CHAINCODE_COUNT((short)8, "chaincodeCount");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // NAME
          return NAME;
        case 3: // PEER_ID
          return PEER_ID;
        case 4: // DATE
          return DATE;
        case 5: // PEER_NAME
          return PEER_NAME;
        case 6: // ORG_NAME
          return ORG_NAME;
        case 7: // LEAGUE_NAME
          return LEAGUE_NAME;
        case 8: // CHAINCODE_COUNT
          return CHAINCODE_COUNT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __PEERID_ISSET_ID = 1;
  private static final int __CHAINCODECOUNT_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.DATE,_Fields.PEER_NAME,_Fields.ORG_NAME,_Fields.LEAGUE_NAME,_Fields.CHAINCODE_COUNT};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PEER_ID, new org.apache.thrift.meta_data.FieldMetaData("peerId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DATE, new org.apache.thrift.meta_data.FieldMetaData("date", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PEER_NAME, new org.apache.thrift.meta_data.FieldMetaData("peerName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ORG_NAME, new org.apache.thrift.meta_data.FieldMetaData("orgName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LEAGUE_NAME, new org.apache.thrift.meta_data.FieldMetaData("leagueName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CHAINCODE_COUNT, new org.apache.thrift.meta_data.FieldMetaData("chaincodeCount", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ChannelInfo.class, metaDataMap);
  }

  public ChannelInfo() {
  }

  public ChannelInfo(
    int id,
    java.lang.String name,
    int peerId)
  {
    this();
    this.id = id;
    setIdIsSet(true);
    this.name = name;
    this.peerId = peerId;
    setPeerIdIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ChannelInfo(ChannelInfo other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    if (other.isSetName()) {
      this.name = other.name;
    }
    this.peerId = other.peerId;
    if (other.isSetDate()) {
      this.date = other.date;
    }
    if (other.isSetPeerName()) {
      this.peerName = other.peerName;
    }
    if (other.isSetOrgName()) {
      this.orgName = other.orgName;
    }
    if (other.isSetLeagueName()) {
      this.leagueName = other.leagueName;
    }
    this.chaincodeCount = other.chaincodeCount;
  }

  public ChannelInfo deepCopy() {
    return new ChannelInfo(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    this.name = null;
    setPeerIdIsSet(false);
    this.peerId = 0;
    this.date = null;
    this.peerName = null;
    this.orgName = null;
    this.leagueName = null;
    setChaincodeCountIsSet(false);
    this.chaincodeCount = 0;
  }

  public int getId() {
    return this.id;
  }

  public ChannelInfo setId(int id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public java.lang.String getName() {
    return this.name;
  }

  public ChannelInfo setName(java.lang.String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public int getPeerId() {
    return this.peerId;
  }

  public ChannelInfo setPeerId(int peerId) {
    this.peerId = peerId;
    setPeerIdIsSet(true);
    return this;
  }

  public void unsetPeerId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PEERID_ISSET_ID);
  }

  /** Returns true if field peerId is set (has been assigned a value) and false otherwise */
  public boolean isSetPeerId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PEERID_ISSET_ID);
  }

  public void setPeerIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PEERID_ISSET_ID, value);
  }

  public java.lang.String getDate() {
    return this.date;
  }

  public ChannelInfo setDate(java.lang.String date) {
    this.date = date;
    return this;
  }

  public void unsetDate() {
    this.date = null;
  }

  /** Returns true if field date is set (has been assigned a value) and false otherwise */
  public boolean isSetDate() {
    return this.date != null;
  }

  public void setDateIsSet(boolean value) {
    if (!value) {
      this.date = null;
    }
  }

  public java.lang.String getPeerName() {
    return this.peerName;
  }

  public ChannelInfo setPeerName(java.lang.String peerName) {
    this.peerName = peerName;
    return this;
  }

  public void unsetPeerName() {
    this.peerName = null;
  }

  /** Returns true if field peerName is set (has been assigned a value) and false otherwise */
  public boolean isSetPeerName() {
    return this.peerName != null;
  }

  public void setPeerNameIsSet(boolean value) {
    if (!value) {
      this.peerName = null;
    }
  }

  public java.lang.String getOrgName() {
    return this.orgName;
  }

  public ChannelInfo setOrgName(java.lang.String orgName) {
    this.orgName = orgName;
    return this;
  }

  public void unsetOrgName() {
    this.orgName = null;
  }

  /** Returns true if field orgName is set (has been assigned a value) and false otherwise */
  public boolean isSetOrgName() {
    return this.orgName != null;
  }

  public void setOrgNameIsSet(boolean value) {
    if (!value) {
      this.orgName = null;
    }
  }

  public java.lang.String getLeagueName() {
    return this.leagueName;
  }

  public ChannelInfo setLeagueName(java.lang.String leagueName) {
    this.leagueName = leagueName;
    return this;
  }

  public void unsetLeagueName() {
    this.leagueName = null;
  }

  /** Returns true if field leagueName is set (has been assigned a value) and false otherwise */
  public boolean isSetLeagueName() {
    return this.leagueName != null;
  }

  public void setLeagueNameIsSet(boolean value) {
    if (!value) {
      this.leagueName = null;
    }
  }

  public int getChaincodeCount() {
    return this.chaincodeCount;
  }

  public ChannelInfo setChaincodeCount(int chaincodeCount) {
    this.chaincodeCount = chaincodeCount;
    setChaincodeCountIsSet(true);
    return this;
  }

  public void unsetChaincodeCount() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CHAINCODECOUNT_ISSET_ID);
  }

  /** Returns true if field chaincodeCount is set (has been assigned a value) and false otherwise */
  public boolean isSetChaincodeCount() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CHAINCODECOUNT_ISSET_ID);
  }

  public void setChaincodeCountIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CHAINCODECOUNT_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((java.lang.Integer)value);
      }
      break;

    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((java.lang.String)value);
      }
      break;

    case PEER_ID:
      if (value == null) {
        unsetPeerId();
      } else {
        setPeerId((java.lang.Integer)value);
      }
      break;

    case DATE:
      if (value == null) {
        unsetDate();
      } else {
        setDate((java.lang.String)value);
      }
      break;

    case PEER_NAME:
      if (value == null) {
        unsetPeerName();
      } else {
        setPeerName((java.lang.String)value);
      }
      break;

    case ORG_NAME:
      if (value == null) {
        unsetOrgName();
      } else {
        setOrgName((java.lang.String)value);
      }
      break;

    case LEAGUE_NAME:
      if (value == null) {
        unsetLeagueName();
      } else {
        setLeagueName((java.lang.String)value);
      }
      break;

    case CHAINCODE_COUNT:
      if (value == null) {
        unsetChaincodeCount();
      } else {
        setChaincodeCount((java.lang.Integer)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case NAME:
      return getName();

    case PEER_ID:
      return getPeerId();

    case DATE:
      return getDate();

    case PEER_NAME:
      return getPeerName();

    case ORG_NAME:
      return getOrgName();

    case LEAGUE_NAME:
      return getLeagueName();

    case CHAINCODE_COUNT:
      return getChaincodeCount();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case NAME:
      return isSetName();
    case PEER_ID:
      return isSetPeerId();
    case DATE:
      return isSetDate();
    case PEER_NAME:
      return isSetPeerName();
    case ORG_NAME:
      return isSetOrgName();
    case LEAGUE_NAME:
      return isSetLeagueName();
    case CHAINCODE_COUNT:
      return isSetChaincodeCount();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof ChannelInfo)
      return this.equals((ChannelInfo)that);
    return false;
  }

  public boolean equals(ChannelInfo that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_id = true;
    boolean that_present_id = true;
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_peerId = true;
    boolean that_present_peerId = true;
    if (this_present_peerId || that_present_peerId) {
      if (!(this_present_peerId && that_present_peerId))
        return false;
      if (this.peerId != that.peerId)
        return false;
    }

    boolean this_present_date = true && this.isSetDate();
    boolean that_present_date = true && that.isSetDate();
    if (this_present_date || that_present_date) {
      if (!(this_present_date && that_present_date))
        return false;
      if (!this.date.equals(that.date))
        return false;
    }

    boolean this_present_peerName = true && this.isSetPeerName();
    boolean that_present_peerName = true && that.isSetPeerName();
    if (this_present_peerName || that_present_peerName) {
      if (!(this_present_peerName && that_present_peerName))
        return false;
      if (!this.peerName.equals(that.peerName))
        return false;
    }

    boolean this_present_orgName = true && this.isSetOrgName();
    boolean that_present_orgName = true && that.isSetOrgName();
    if (this_present_orgName || that_present_orgName) {
      if (!(this_present_orgName && that_present_orgName))
        return false;
      if (!this.orgName.equals(that.orgName))
        return false;
    }

    boolean this_present_leagueName = true && this.isSetLeagueName();
    boolean that_present_leagueName = true && that.isSetLeagueName();
    if (this_present_leagueName || that_present_leagueName) {
      if (!(this_present_leagueName && that_present_leagueName))
        return false;
      if (!this.leagueName.equals(that.leagueName))
        return false;
    }

    boolean this_present_chaincodeCount = true && this.isSetChaincodeCount();
    boolean that_present_chaincodeCount = true && that.isSetChaincodeCount();
    if (this_present_chaincodeCount || that_present_chaincodeCount) {
      if (!(this_present_chaincodeCount && that_present_chaincodeCount))
        return false;
      if (this.chaincodeCount != that.chaincodeCount)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + id;

    hashCode = hashCode * 8191 + ((isSetName()) ? 131071 : 524287);
    if (isSetName())
      hashCode = hashCode * 8191 + name.hashCode();

    hashCode = hashCode * 8191 + peerId;

    hashCode = hashCode * 8191 + ((isSetDate()) ? 131071 : 524287);
    if (isSetDate())
      hashCode = hashCode * 8191 + date.hashCode();

    hashCode = hashCode * 8191 + ((isSetPeerName()) ? 131071 : 524287);
    if (isSetPeerName())
      hashCode = hashCode * 8191 + peerName.hashCode();

    hashCode = hashCode * 8191 + ((isSetOrgName()) ? 131071 : 524287);
    if (isSetOrgName())
      hashCode = hashCode * 8191 + orgName.hashCode();

    hashCode = hashCode * 8191 + ((isSetLeagueName()) ? 131071 : 524287);
    if (isSetLeagueName())
      hashCode = hashCode * 8191 + leagueName.hashCode();

    hashCode = hashCode * 8191 + ((isSetChaincodeCount()) ? 131071 : 524287);
    if (isSetChaincodeCount())
      hashCode = hashCode * 8191 + chaincodeCount;

    return hashCode;
  }

  @Override
  public int compareTo(ChannelInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetName()).compareTo(other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetPeerId()).compareTo(other.isSetPeerId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPeerId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.peerId, other.peerId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetDate()).compareTo(other.isSetDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.date, other.date);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetPeerName()).compareTo(other.isSetPeerName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPeerName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.peerName, other.peerName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetOrgName()).compareTo(other.isSetOrgName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrgName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orgName, other.orgName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetLeagueName()).compareTo(other.isSetLeagueName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLeagueName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.leagueName, other.leagueName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetChaincodeCount()).compareTo(other.isSetChaincodeCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChaincodeCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.chaincodeCount, other.chaincodeCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("ChannelInfo(");
    boolean first = true;

    sb.append("id:");
    sb.append(this.id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("name:");
    if (this.name == null) {
      sb.append("null");
    } else {
      sb.append(this.name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("peerId:");
    sb.append(this.peerId);
    first = false;
    if (isSetDate()) {
      if (!first) sb.append(", ");
      sb.append("date:");
      if (this.date == null) {
        sb.append("null");
      } else {
        sb.append(this.date);
      }
      first = false;
    }
    if (isSetPeerName()) {
      if (!first) sb.append(", ");
      sb.append("peerName:");
      if (this.peerName == null) {
        sb.append("null");
      } else {
        sb.append(this.peerName);
      }
      first = false;
    }
    if (isSetOrgName()) {
      if (!first) sb.append(", ");
      sb.append("orgName:");
      if (this.orgName == null) {
        sb.append("null");
      } else {
        sb.append(this.orgName);
      }
      first = false;
    }
    if (isSetLeagueName()) {
      if (!first) sb.append(", ");
      sb.append("leagueName:");
      if (this.leagueName == null) {
        sb.append("null");
      } else {
        sb.append(this.leagueName);
      }
      first = false;
    }
    if (isSetChaincodeCount()) {
      if (!first) sb.append(", ");
      sb.append("chaincodeCount:");
      sb.append(this.chaincodeCount);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (name == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'name' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'peerId' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ChannelInfoStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ChannelInfoStandardScheme getScheme() {
      return new ChannelInfoStandardScheme();
    }
  }

  private static class ChannelInfoStandardScheme extends org.apache.thrift.scheme.StandardScheme<ChannelInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ChannelInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.id = iprot.readI32();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PEER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.peerId = iprot.readI32();
              struct.setPeerIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.date = iprot.readString();
              struct.setDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // PEER_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.peerName = iprot.readString();
              struct.setPeerNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // ORG_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.orgName = iprot.readString();
              struct.setOrgNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // LEAGUE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.leagueName = iprot.readString();
              struct.setLeagueNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // CHAINCODE_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.chaincodeCount = iprot.readI32();
              struct.setChaincodeCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetPeerId()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'peerId' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ChannelInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeI32(struct.id);
      oprot.writeFieldEnd();
      if (struct.name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(struct.name);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PEER_ID_FIELD_DESC);
      oprot.writeI32(struct.peerId);
      oprot.writeFieldEnd();
      if (struct.date != null) {
        if (struct.isSetDate()) {
          oprot.writeFieldBegin(DATE_FIELD_DESC);
          oprot.writeString(struct.date);
          oprot.writeFieldEnd();
        }
      }
      if (struct.peerName != null) {
        if (struct.isSetPeerName()) {
          oprot.writeFieldBegin(PEER_NAME_FIELD_DESC);
          oprot.writeString(struct.peerName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.orgName != null) {
        if (struct.isSetOrgName()) {
          oprot.writeFieldBegin(ORG_NAME_FIELD_DESC);
          oprot.writeString(struct.orgName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.leagueName != null) {
        if (struct.isSetLeagueName()) {
          oprot.writeFieldBegin(LEAGUE_NAME_FIELD_DESC);
          oprot.writeString(struct.leagueName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetChaincodeCount()) {
        oprot.writeFieldBegin(CHAINCODE_COUNT_FIELD_DESC);
        oprot.writeI32(struct.chaincodeCount);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ChannelInfoTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ChannelInfoTupleScheme getScheme() {
      return new ChannelInfoTupleScheme();
    }
  }

  private static class ChannelInfoTupleScheme extends org.apache.thrift.scheme.TupleScheme<ChannelInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ChannelInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeString(struct.name);
      oprot.writeI32(struct.peerId);
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetDate()) {
        optionals.set(1);
      }
      if (struct.isSetPeerName()) {
        optionals.set(2);
      }
      if (struct.isSetOrgName()) {
        optionals.set(3);
      }
      if (struct.isSetLeagueName()) {
        optionals.set(4);
      }
      if (struct.isSetChaincodeCount()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetId()) {
        oprot.writeI32(struct.id);
      }
      if (struct.isSetDate()) {
        oprot.writeString(struct.date);
      }
      if (struct.isSetPeerName()) {
        oprot.writeString(struct.peerName);
      }
      if (struct.isSetOrgName()) {
        oprot.writeString(struct.orgName);
      }
      if (struct.isSetLeagueName()) {
        oprot.writeString(struct.leagueName);
      }
      if (struct.isSetChaincodeCount()) {
        oprot.writeI32(struct.chaincodeCount);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ChannelInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.name = iprot.readString();
      struct.setNameIsSet(true);
      struct.peerId = iprot.readI32();
      struct.setPeerIdIsSet(true);
      java.util.BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        struct.id = iprot.readI32();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.date = iprot.readString();
        struct.setDateIsSet(true);
      }
      if (incoming.get(2)) {
        struct.peerName = iprot.readString();
        struct.setPeerNameIsSet(true);
      }
      if (incoming.get(3)) {
        struct.orgName = iprot.readString();
        struct.setOrgNameIsSet(true);
      }
      if (incoming.get(4)) {
        struct.leagueName = iprot.readString();
        struct.setLeagueNameIsSet(true);
      }
      if (incoming.get(5)) {
        struct.chaincodeCount = iprot.readI32();
        struct.setChaincodeCountIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

